{
    "id": "27",
    "nombre": "Métodos de ordenamiento: Merge Sort",
    "contenido": "Se trata de un método de ordenamiento con un algoritmo que utiliza la recursividad para evaluar mitades dentro de un array de datos. De manera más específica consiste en dividir el vector en partes más pequeñas, estas partes se ordenan y finalmente se mezclan entre sí siguiendo el orden deseado. \n\nEste método de ordenamiento sigue los siguientes pasos.\n\n- Si la longitud del array es menor o igual a 1 entonces ya está ordenado.\n- El array a ordenar se divide en dos mitades de tamaño similar.\n- Cada mitad se ordena de forma recursiva aplicando el método MergeSort.\n- A continuación las dos mitades ya ordenadas se mezclan formando una secuencia ordenada.\n\nEste método de ordenamiento tiene una complejidad (O) de:  \n\n*O= *(n⋅log(n))\n\nDonde n es el número de valores fijo, en términos de complejidad de tiempo para este algoritmo no difiere mucho si los valores iniciales se tienen en un orden ascendente, descendente o aleatorio pues la matriz se divide y se fusiona mediante la comparación, tanto si la matriz ya está ordenada como si no.",
    "imagenes": {
        "1": {
            "url": "https://i.imgur.com/A77aRjO.png",
            "alt": "Ejemplo del proceso que sigue el algoritmo Merge Sort"
        },
        "2": {
            "url": "https://i.imgur.com/76BBpNV.png",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "27-1-E",
            "imagen": "",
            "pregunta": "Dado un arreglo arr = [7,10,3,4,2,8] al ejecutar el algoritmo ¿En qué paso el arreglo se encuentra como [3, 7, 10, 4, 2, 8]?",
            "respuestas": {
                "1": {
                    "contenido": "Paso 1",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [7, 10, 3, 4, 2, 8]",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Paso 2",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [3, 7, 10, 4, 2, 8]",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Paso 3",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [3, 7, 10, 2, 4, 8]",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Paso 4",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [3, 7, 10, 2, 4, 8]",
                    "estado": "false"   
                }
            }
        },
        "2": {
            "id": "27-2-E",
            "imagen": "",
            "pregunta": "Dado un arreglo arr = [6,11,9,1,13] al ejecutar el algoritmo ¿En qué paso el arreglo se encuentra como [1, 6, 9, 11, 13]?",
            "respuestas": {
                "1": {
                    "contenido": "Paso 1",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [6, 11, 9, 1, 13]",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Paso 2",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [6, 9, 11, 1, 13]",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Paso 3",
                    "retroalimentacion": "En este paso el arreglo se encuentra como [6, 9, 11, 1, 13]",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Paso 4",
                    "retroalimentacion": "Es el estado ordenado del arreglo [1, 6, 9, 11, 13]",
                    "estado": "true"
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "27-1-P",
            "pregunta": "¿Cuál es el primer paso del algoritmo MergeSort?",
            "respuestas": {
                "1": {
                    "contenido": "Dividir el array en partes más pequeñas.",
                    "retroalimentacion": "El primer paso del algoritmo MergeSort es dividir el array en partes más pequeñas hasta que cada parte tenga un solo elemento o esté vacía.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Mezclar las dos mitades del array.",
                    "retroalimentacion": "El paso de mezclar viene después de que las partes hayan sido divididas y ordenadas por separado.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Verificar si el array está vacío.",
                    "retroalimentacion": "Verificar si el array está vacío no es el primer paso en el algoritmo MergeSort.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Contar la longitud del array.",
                    "retroalimentacion": "Contar la longitud del array no es el primer paso en el algoritmo MergeSort.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "27-2-P",
            "pregunta": "¿En qué consiste el paso de \"mezclar\" en el algoritmo MergeSort?",
            "respuestas": {
                "1": {
                    "contenido": "Ordenar las mitades del array.",
                    "retroalimentacion": "El paso de mezclar no consiste en ordenar las mitades, sino en combinarlas de manera ordenada.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Dividir el array en partes más pequeñas.",
                    "retroalimentacion": "Dividir el array en partes más pequeñas es el primer paso, no el de mezclar.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Fusionar las dos mitades ordenadas del array en una secuencia ordenada.",
                    "retroalimentacion": "El paso de mezclar en el algoritmo MergeSort consiste en fusionar las dos mitades ordenadas del array en una secuencia ordenada.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Contar la longitud del array.",
                    "retroalimentacion": "Contar la longitud del array no es parte del paso de mezclar en el algoritmo MergeSort.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "27-3-P",
            "pregunta": "¿Cuál es la complejidad temporal del algoritmo MergeSort en términos de notación O grande (O)?",
            "respuestas": {
                "1": {
                    "contenido": "O(n)",
                    "retroalimentacion": "La complejidad temporal O(n) es incorrecta, ya que no considera el proceso de dividir y mezclar los elementos.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "O(log n)",
                    "retroalimentacion": "O(log n) es incorrecta, ya que esta complejidad no refleja adecuadamente el trabajo realizado al dividir y mezclar.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "O(n^2)",
                    "retroalimentacion": "O(n^2) es incorrecta, ya que es la complejidad de algoritmos menos eficientes como BubbleSort.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "O(n⋅log(n))",
                    "retroalimentacion": "La complejidad temporal de MergeSort es O(n⋅log(n)) debido a la división repetida del array y la posterior fusión de los subarrays.",
                    "estado": "true"
                }
            }
        },
        "4": {
            "id": "27-4-P",
            "pregunta": "¿Cómo afecta el estado inicial del array al rendimiento del algoritmo MergeSort?",
            "respuestas": {
                "1": {
                    "contenido": "No afecta al rendimiento.",
                    "retroalimentacion": "El rendimiento de MergeSort es independiente del estado inicial del array, ya que siempre realiza el mismo número de operaciones independientemente del orden de los elementos.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Afecta negativamente si el array está ordenado de forma descendente.",
                    "retroalimentacion": "MergeSort realiza el mismo número de operaciones independientemente del orden de los elementos, por lo que el rendimiento no se ve afectado por un array ordenado de forma descendente.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Afecta positivamente si el array está ordenado de forma ascendente.",
                    "retroalimentacion": "MergeSort realiza el mismo número de operaciones independientemente del orden de los elementos, por lo que el rendimiento no se ve afectado por un array ordenado de forma ascendente.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Afecta negativamente si el array está ordenado de forma aleatoria.",
                    "retroalimentacion": "MergeSort realiza el mismo número de operaciones independientemente del orden de los elementos, por lo que el rendimiento no se ve afectado por un array ordenado de forma aleatoria.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "27-5-P",
            "pregunta": "¿Cuál es la condición de parada en la recursión del algoritmo MergeSort?",
            "respuestas": {
                "1": {
                    "contenido": "Si la longitud del array es menor o igual a 1.",
                    "retroalimentacion": "La recursión en MergeSort se detiene cuando la longitud del array es menor o igual a 1, ya que un array de esa longitud ya está ordenado.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Si la longitud del array es igual a 2.",
                    "retroalimentacion": "La recursión en MergeSort no se detiene específicamente en arrays de longitud 2.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Si la longitud del array es mayor que 1.",
                    "retroalimentacion": "La recursión en MergeSort continúa mientras la longitud del array sea mayor que 1.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Si la longitud del array es igual a 0.",
                    "retroalimentacion": "La recursión en MergeSort se detiene no solo cuando la longitud es 0, existe otra condición que lo puede detener.",
                    "estado": "false"
                }
            }
        }
    }
}