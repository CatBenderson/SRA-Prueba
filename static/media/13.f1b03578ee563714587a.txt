{
    "id": "13",
    "nombre": "Mejores prácticas: Rutinas de alta calidad",
    "contenido": "Al hablar acerca de mejorar nuestra manera de programar, tenemos que tocar el tema de las rutinas. Este concepto se refiere a un método función o procedimiento individuales que cumplen un propósito en específico y son invocables. Con esto en mente, cobra mucho sentido que sean una de las partes más importantes con las que trabajamos y de estas depende la calidad general de nuestro programa.  A continuación se presentarán las áreas que deben tomarse en cuenta para crear rutinas de alta calidad\n\n*Nombrado *(naming): El asignar un nombre adecuado a nuestras rutinas es esencial ya que el propio nombre lleva implícita la naturaleza del objeto o función que estamos manejando. Un buen nombre para una función contempla:\n\n        *- *Indicar *qué *es *lo *que *hace *la *función:  De manera general un nombre de función se compone de:  verbo + objeto. Un ejemplo de esto puede ser listarEmpleados()\n\n        *- *Evitar *nombres *vagos: Nombres tales como realizarCambios() pueden no dar demasiada información sobre sus verdaderas operaciones. \n\n        *- *Evitar *la *sobrecualificación:  En este caso, se debe tratar de no hacer los nombres redundantes, en el caso de listarListaEmpleados() , podemos reducirlo ya que al agregar el verbo ''listar'' entendemos que utilizamos una Lista\n\n        *- *Usar *antónimos: La consistencia del uso de antónimos, nos ayuda a tener consistencia y simetría, lo cual a su vez se traduce en legibilidad. Un ejemplo de esto es que si nombramos una rutina como añadirHoja() lo recomendable sería también usar removerHoja()\n\n        *- *Establecer *estándares *para *acciones *comunes: Para todas aquellas operaciones que realizan acciones similares, se recomienda utilizar una misma convención ya que esto facilita la lectura del código. Es recomendable que si tenemos empleado.obtenerDomicilio()  usemos también supervisor.obtenerDomicilio() en lugar de supervisor.obtenerCasa()\n\n*Longitud *ideal *para *una *rutina: Ya que cada función tiene una complejidad diferente, no hay una regla específica de cuantas líneas debe estar formada. Sin embargo las rutinas pequeñas siempre son lo más deseado.\n\n*Parámetros *de *una *rutina: Es importante que los parámetros se puedan diferenciar entre los operandos (parámetros con los que opera la rutina) y las opciones (representa los modos en los que una rutina va a funcionar). También, es importante mencionar que entre menos parámetros necesite una función será mejor. En lugar de declarar  añadirDomicilio(String calle, string numero, string colonia) es preferible añadirDomicilio(Domicilio domicilio)\n",
    "imagenes": {
        "1": {
            "url": "",
            "alt": ""
        },
        "2": {
            "url": "",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "13-1-E",
            "imagen": "https://i.imgur.com/9W1AXVb.png",
            "pregunta": "¿Cuál es el problema en esta rutina?",
            "respuestas": {
                "1": {
                    "contenido": "Mal manejo de parámetros",
                    "retroalimentacion": "No hay manipulación de parámetros adicionales en el método main, por lo que no hay errores en el manejo de parámetros.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Indicar qué es lo que hace la función",
                    "retroalimentacion": "No hay problemas en indicar lo que hace la función porque es fácilmente comprensible.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "No establecer estándares",
                    "retroalimentacion": "De la manera en la que se muestra, el código sigue convenciones comunes y es fácil de entender",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Uso de nombres vagos",
                    "retroalimentacion": "El nombre \"Cliente\" para la clase y \"n\" para el nombre del cliente son bastante vagos y podrían ser más descriptivos.",
                    "estado": "true"
                }
            }
        },
        "2": {
            "id": "13-2-E",
            "imagen": "https://i.imgur.com/souVjkr.png",
            "pregunta": "¿Cuál es el problema en esta rutina?",
            "respuestas": {
                "1": {
                    "contenido": "Mal manejo de parámetros",
                    "retroalimentacion": " La función mostrarMapa espera que los parámetros latitud y longitud sean cadenas que representen números decimales, sin embargo, no se realiza ningún tipo de validación para asegurar que estos valores sean números válidos antes de intentar convertirlos.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Uso de nombres vagos",
                    "retroalimentacion": "Los nombres latitud y longitud son bastante descriptivos y reflejan claramente su propósito.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "No indicar qué es lo que hace la función",
                    "retroalimentacion": "No hay problema en no indicar explícitamente qué hace la función ya que su nombre y su implementación son lo suficientemente descriptivos.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "No establecer estándares",
                    "retroalimentacion": "En el caso de esta código no hay un problema significativo en no establecer estándares.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "13-1-P",
            "pregunta": "¿Cuál es el propósito principal al utilizar antónimos en los nombres de rutinas?",
            "respuestas": {
                "1": {
                    "contenido": "Disminuir la complejidad",
                    "retroalimentacion": "Utilizar antónimos en los nombres de rutinas no está directamente relacionado con disminuir la complejidad del código, sino más bien con hacer que las relaciones entre las rutinas sean claras y comprensibles.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Mejorar la consistencia y simetría",
                    "retroalimentacion": "Utilizar antónimos en los nombres de rutinas ayuda a mejorar la consistencia y simetría del código, haciendo que sea más fácil entender las relaciones y funciones opuestas entre las rutinas.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Reducir la legibilidad",
                    "retroalimentacion": "El uso de antónimos en los nombres de rutinas no está destinado a reducir la legibilidad, sino a mejorarla al hacer claras las funciones opuestas y las relaciones entre diferentes partes del código.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Evitar el uso de nombres específicos",
                    "retroalimentacion": "El objetivo de usar antónimos no es evitar nombres específicos, sino más bien usar nombres que reflejen claramente las funciones opuestas para mejorar la comprensión del código.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "13-2-P",
            "pregunta": "¿Qué se recomienda al nombrar las rutinas cuando estas realizan acciones comunes?",
            "respuestas": {
                "1": {
                    "contenido": "Utilizar diferentes convenciones para operaciones similares",
                    "retroalimentacion": "Usar diferentes convenciones para operaciones similares puede causar confusión y falta de consistencia en el código, dificultando su mantenimiento y comprensión.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Establecer estándares solo para operaciones únicas",
                    "retroalimentacion": "Establecer estándares solo para operaciones únicas no ayuda a crear una consistencia en el código. Es importante tener convenciones para todas las operaciones comunes para mantener la claridad y coherencia.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "No seguir ninguna convención",
                    "retroalimentacion": "No seguir ninguna convención puede llevar a un código desorganizado y difícil de mantener, ya que la falta de consistencia en los nombres puede confundir a los desarrolladores.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Utilizar una misma convención para acciones similares",
                    "retroalimentacion": "Utilizar una misma convención para acciones similares ayuda a mantener la coherencia y claridad en el código, facilitando su mantenimiento y comprensión por parte de los desarrolladores.",
                    "estado": "true"
                }
            }
        },
        "3": {
            "id": "13-3-P",
            "pregunta": "¿Cuál es un principio importante mencionado para la longitud ideal de una rutina?",
            "respuestas": {
                "1": {
                    "contenido": "Cuantas más líneas, mejor",
                    "retroalimentacion": "Aumentar la cantidad de líneas en una rutina no necesariamente mejora su calidad. Rutinas más largas pueden ser más difíciles de entender y mantener.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Mientras más compleja, mejor",
                    "retroalimentacion": "La complejidad en una rutina no es un objetivo deseable, ya que puede hacer que el código sea más difícil de entender y mantener.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Rutinas pequeñas son preferibles",
                    "retroalimentacion": "Las rutinas pequeñas tienden a ser más fáciles de entender, probar y mantener. Promueven la reutilización y la separación de responsabilidades en el código.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "La longitud no importa",
                    "retroalimentacion": "La longitud de una rutina sí importa. Rutinas más cortas y bien definidas suelen ser más fáciles de manejar y entender, mientras que las más largas pueden ser complejas y difíciles de seguir.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "13-4-P",
            "pregunta": "¿Cuál es la importancia del nombrado adecuado de rutinas?",
            "respuestas": {
                "1": {
                    "contenido": "No es importante",
                    "retroalimentacion": "El nombrado adecuado de rutinas es crucial para la comprensión del código. Ignorar esto puede llevar a dificultades en el mantenimiento y entendimiento del mismo por parte de otros desarrolladores.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Facilita la lectura y comprensión del código",
                    "retroalimentacion": "Un buen nombrado de rutinas facilita la lectura y comprensión del código, haciendo más fácil para los desarrolladores entender y mantener el sistema.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Solo es relevante para funciones pequeñas",
                    "retroalimentacion": "El nombrado adecuado es importante para todas las funciones, no solo para las pequeñas. Esto asegura que el código sea comprensible y manejable sin importar el tamaño de la función.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Hace que las rutinas sean menos complejas",
                    "retroalimentacion": "Si bien un buen nombrado puede ayudar a entender mejor el propósito de una rutina, no reduce la complejidad inherente del código. La claridad y la comprensión son los beneficios principales.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "13-5-P",
            "pregunta": "¿Por qué se sugiere evitar nombres vagos en las rutinas?",
            "respuestas": {
                "1": {
                    "contenido": "Para hacer el código menos abstracto",
                    "retroalimentacion": "Evitar nombres vagos no necesariamente hace que el código sea menos abstracto. La claridad en los nombres es para asegurar que el propósito y las operaciones de las rutinas sean fáciles de entender.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Para reducir líneas utilizando nombres más cortos",
                    "retroalimentacion": "El objetivo no es reducir la cantidad de líneas mediante nombres más cortos. Nombres claros y descriptivos son más importantes que la longitud del nombre.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Para proporcionar información clara sobre las operaciones de la rutina",
                    "retroalimentacion": "Los nombres claros y específicos ayudan a entender exactamente qué operaciones realiza una rutina, mejorando la legibilidad y el mantenimiento del código.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Para confundir a otros programadores",
                    "retroalimentacion": "El objetivo de nombrar rutinas no es confundir a otros programadores, sino todo lo contrario.",
                    "estado": "false"
                }
            }
        }
    }
}