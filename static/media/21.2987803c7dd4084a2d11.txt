{
    "id": "21",
    "nombre": "Árboles binarios de búsqueda: Aplicaciones",
    "contenido": "Dentro del campo de las tecnologías de la información, los árboles binarios de búsqueda son una estructura con una amplia variedad de usos y aplicaciones. A continuación mostraremos algunas de ellas.\n\n*Montículo *binario: Un heap o montículo es un árbol binario completo, y además parcialmente ordenado, tal que el valor de su raíz es mayor o igual que las raíces de sus hijos, siendo también heaps ambos hijos. Debido a su estructura permite obtener el mínimo elemento de un conjunto en tiempo constante, sin importar el tamaño del conjunto. Gracias a esto toma importancia en situaciones que utilizan el modelo de cola de propiedad, en la que se obtienen los elementos en base a cierta prioridad. Ejemplos de esto es el orden de atención de los pacientes en un hospital con base en su urgencia o una cola de prioridad de trabajos de impresión con base en su extensión.\n\n*Árboles *de *Merkle: También conocidos como árboles de hash binario, son estructuras de datos que permiten verificar la integridad de los elementos dentro de una base de datos. Son de gran importancia dentro de áreas como la criptografía, el blockchain e incluso en algunas criptomonedas. Para construir un árbol de Merkle, primero se divide todo el conjunto de datos en segmentos más pequeños llamados bloques. Si no hay un número par de bloques, el último bloque se duplica para conseguir paridad. A cada bloque se le asigna un hash, que se convierte en un nodo hoja del árbol. Para establecer la jerarquía del árbol, se combinan (concatenan) dos hashes de nodos hoja vecinos. El par concatenado se somete a un hash para producir un nodo padre que se sitúa por encima de los dos nodos hoja originales. El proceso de emparejamiento y hash continúa capa por capa, ascendiendo por el árbol hasta que sólo queda un hash en la parte superior. El hash final, conocido como “raíz de Merkle” o “hash raíz”, resume todo el conjunto de datos.\n",
    "imagenes": {
        "1": {
            "url": "https://i.imgur.com/wBRS1vi.png",
            "alt": ""
        },
        "2": {
            "url": "https://i.imgur.com/ZMx6cUc.png",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "2": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "21-1-P",
            "pregunta": "¿Cuál es una característica clave de un montículo binario?",
            "respuestas": {
                "1": {
                    "contenido": "Es un árbol binario incompleto.",
                    "retroalimentacion": "Un montículo binario es un árbol binario completo, lo que significa que todos los niveles del árbol están completamente llenos excepto posiblemente el último, que está lleno de izquierda a derecha.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "La raíz siempre es menor o igual que los valores de sus hijos.",
                    "retroalimentacion": "Esto es cierto solo para un montículo mínimo, pero un montículo binario también puede ser un montículo máximo donde la raíz es mayor o igual que los valores de sus hijos.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Permite obtener el mínimo elemento de un conjunto en tiempo constante.",
                    "retroalimentacion": "Una de las características clave de un montículo mínimo binario es que permite obtener el mínimo elemento en tiempo constante, ya que el mínimo siempre está en la raíz.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "No se utiliza en situaciones que requieren priorización.",
                    "retroalimentacion": "Los montículos binarios se utilizan precisamente en situaciones que requieren priorización, como en colas de prioridad y algoritmos de optimización.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "21-2-P",
            "pregunta": "¿Qué estructura de datos es utilizada para verificar la integridad de elementos dentro de una base de datos en criptografía y blockchain?",
            "respuestas": {
                "1": {
                    "contenido": "Lista enlazada.",
                    "retroalimentacion": "Una lista enlazada no proporciona un mecanismo eficiente para verificar la integridad de los datos, ya que no permite la comparación rápida de subgrupos de datos.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Montículo binario.",
                    "retroalimentacion": "Un montículo binario se utiliza para estructuras de datos como colas de prioridad, pero no es adecuado para verificar la integridad de los datos en criptografía y blockchain.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Árbol de Merkle.",
                    "retroalimentacion": "Un árbol de Merkle permite verificar eficientemente la integridad de los datos en sistemas de criptografía y blockchain mediante la comparación de hashes.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Grafo.",
                    "retroalimentacion": "Aunque los grafos se utilizan en diversas aplicaciones, no son específicos para la verificación de integridad de datos en criptografía y blockchain.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "21-3-P",
            "pregunta": "¿Qué ocurre si el número de bloques en la construcción de un árbol de Merkle es impar?",
            "respuestas": {
                "1": {
                    "contenido": "Se descarta el último bloque.",
                    "retroalimentacion": "Descartar el último bloque significaría perder información. En un árbol de Merkle, todos los bloques deben estar representados.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Se duplica el último bloque para conseguir paridad.",
                    "retroalimentacion": "Si el número de bloques es impar, se duplica el último bloque para asegurar que cada nivel del árbol de Merkle tenga un número par de bloques.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Se crea un nuevo bloque combinando los bloques restantes.",
                    "retroalimentacion": "No se crea un nuevo bloque combinando bloques restantes, ya que esto alteraría la integridad de los datos originales.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Se continua con la construcción del árbol sin cambios.",
                    "retroalimentacion": "Continuar sin cambios no es una opción válida ya que el árbol de Merkle requiere pares de nodos para construir los niveles superiores correctamente.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "21-4-P",
            "pregunta": "¿Qué tipo de aplicaciones se benefician de un montículo binario?",
            "respuestas": {
                "1": {
                    "contenido": "Aplicaciones de reconocimiento facial.",
                    "retroalimentacion": "El reconocimiento facial no se beneficia específicamente del uso de montículos binarios. Estas aplicaciones generalmente utilizan técnicas de procesamiento de imágenes y aprendizaje automático.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Sistemas de navegación GPS.",
                    "retroalimentacion": "Los sistemas de navegación GPS no utilizan montículos binarios de manera específica. Están más relacionados con algoritmos de ruta y datos geoespaciales.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Sistemas de cola de prioridad.",
                    "retroalimentacion": "Los montículos binarios son fundamentales en la implementación de colas de prioridad, donde es importante acceder rápidamente al elemento con la máxima o mínima prioridad.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Protección de criptomonedas.",
                    "retroalimentacion": "La protección de criptomonedas generalmente utiliza técnicas de criptografía y blockchain, no montículos binarios.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "21-5-P",
            "pregunta": "¿Cuál es el resultado final del proceso de emparejamiento y hash en un árbol de Merkle?",
            "respuestas": {
                "1": {
                    "contenido": "Un nuevo conjunto de datos.",
                    "retroalimentacion": "El proceso de emparejamiento y hash en un árbol de Merkle no genera un nuevo conjunto de datos.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Un hash que resume todo el conjunto de datos.",
                    "retroalimentacion": "El resultado final del proceso de emparejamiento y hash en un árbol de Merkle es un hash único que resume todo el conjunto de datos, lo que permite verificar su integridad de manera eficiente.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Una lista ordenada de bloques.",
                    "retroalimentacion": "El resultado final no es una lista ordenada de bloques, sino un objeto único que representa la integridad de los datos.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "La eliminación de la raíz del árbol.",
                    "retroalimentacion": "La raíz del árbol de Merkle no se elimina; de hecho, el hash de la raíz es el resultado final que se utiliza para verificar la integridad de los datos.",
                    "estado": "false"
                }
            }
        }
    }
}