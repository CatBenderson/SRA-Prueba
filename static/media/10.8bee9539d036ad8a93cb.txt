{
    "id": "10",
    "nombre": "Mejores prácticas: Estándares de codificación y documentación",
    "contenido": "Son un elemento fundamental dentro de las buenas prácticas ya que brindan estabilidad, reutilización y mantenibilidad al código, incrementando su calidad en general.  Dependiendo del lenguaje las reglas serán diferentes pero siempre hay generalizaciones que aplican a una mayoría\n\nIndentación y formato consistentes: El mantener una correcta indentación ayuda a que el código sea legible y coherente. Ayuda también a identificar los diferentes bloques dentro de un código permitiendo a los programadores una navegación y revisión más fluida.\n\n*Convenciones *de *nombres *descriptivos *y *significativos: Las variables, funciones, clases y entidades que se incluyen en el código deben ser autodescriptivas, es decir que su nombre tiene que estar estrictamente relacionado con lo que representan para que sea comprensible sin necesitar comentarios o explicaciones adicionales\n\n*Modularización *y *reutilización: Estos son elementos que ya se han abarcado en unidades anteriores (Fundamentos: Minimizar la complejidad y Fundamentos: Re-uso) \n\n*Comentarios *para *claridad: En algunas ocasiones un nombrado apropiado no es suficiente para describir la funcionalidad de una parte de código, en estos casos es de ayuda escribir comentarios para facilitar la documentación y entendimiento del código\n\n*Manejo *de *errores *y *gestión *de *excepciones: Partimos del entendimiento de que no hay programa perfecto, así que debemos estar preparados para que los errores ocurran. En casos así se debe dar al usuario mensajes claros y útiles para saber qué debe hacer a continuación\n\nCabe mencionar que el simple hecho de utilizar estas prácticas no aseguran el éxito de un proyecto pero si contribuyen a que su desempeño, calidad y aceptación sea mayor.",
    "imagenes": {
        "1": {
            "url": "",
            "alt": ""
        },
        "2": {
            "url": "",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "2": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "10-1-P",
            "pregunta": "¿Por qué es importante mantener una correcta indentación en el código?",
            "respuestas": {
                "1": {
                    "contenido": "Porque disminuye la complejidad del código",
                    "retroalimentacion": "Mantener una correcta indentación no necesariamente disminuye la complejidad del código. La indentación sirve para mantener una mejor organización visual y estructura",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Porque reduce la legibilidad y coherencia del código",
                    "retroalimentacion": "La correcta indentación en realidad mejora la legibilidad y coherencia del código. Reducir estas cualidades no es una buena razón para mantener una correcta indentación.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Porque facilita la identificación de diferentes bloques y mejora la legibilidad",
                    "retroalimentacion": "La correcta indentación ayuda a los programadores a identificar rápidamente los diferentes bloques de código, lo cual mejora la legibilidad y la comprensión del flujo del programa.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Porque ayuda a evitar errores de sintaxis",
                    "retroalimentacion": "Una correcta indentación no es una garantía para evitar errores de sintaxis, ya que estos están más relacionados con el uso correcto del lenguaje de programación.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "10-2-P",
            "pregunta": "¿Qué se entiende por convenciones de nombres descriptivos y significativos en el código?",
            "respuestas": {
                "1": {
                    "contenido": "Utilizar nombres cortos e incomprensibles",
                    "retroalimentacion": "Nombres cortos e incomprensibles dificultan la comprensión del código ya que no describen adecuadamente la función o propósito de una variable, función o clase",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Utilizar nombres que no estén relacionados con lo que representan",
                    "retroalimentacion": "Los nombres que no están relacionados con lo que representan pueden confundir a los programadores y dificultar la comprensión del código.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Utilizar nombres que estén estrechamente relacionados con lo que representan",
                    "retroalimentacion": "Los nombres descriptivos y significativos deben reflejar claramente el propósito o la función de la variable, función o clase, facilitando la comprensión y mantenimiento del código.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Utilizar nombres que no confundan a los programadores",
                    "retroalimentacion": "Esta respuesta es incompleta. El uso de nombres descriptivos y significativos va más allá de simplemente evitar la confusión. Los nombres sirven paraproporcionar un entendimiento claro del propósito del código.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "10-3-P",
            "pregunta": "¿Cuál es uno de los beneficios de la modularización y reutilización de código?",
            "respuestas": {
                "1": {
                    "contenido": "Aumenta la complejidad del código",
                    "retroalimentacion": "La modularización y reutilización de código generalmente se utilizan para reducir la complejidad del código al dividirlo en partes manejables y reutilizables.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Mejora la estabilidad, reutilización y mantenibilidad del código",
                    "retroalimentacion": "La modularización permite crear componentes independientes y reutilizables, lo cual mejora la estabilidad del sistema, facilita la reutilización en otros proyectos y simplifica el mantenimiento.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Reduce la legibilidad del código",
                    "retroalimentacion": "Al implementar de manera correcta la modularización se mejora la legibilidad del código al dividirlo en partes bien definidas y fáciles de entender, no se reduce.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Incrementa el tamaño del código",
                    "retroalimentacion": "La modularización no necesariamente se relaciona con un incremento en el tamaño del código.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "10-4-P",
            "pregunta": "¿En qué situaciones es útil utilizar comentarios en el código?",
            "respuestas": {
                "1": {
                    "contenido": "Cuando el nombrado apropiado no es suficiente para describir la funcionalidad del código",
                    "retroalimentacion": "Aunque un buen nombrado puede ayudar mucho, hay situaciones complejas donde los comentarios son necesarios para explicar la lógica o propósito del código de manera más detallada.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Cuando se desea aumentar la complejidad del código",
                    "retroalimentacion": "El propósito de los comentarios no es aumentar la complejidad del código, sino aclarar y explicar partes del código que puedan ser difíciles de entender.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Cuando no se quiere ocultar información sobre el funcionamiento interno del código",
                    "retroalimentacion": "Los comentarios deben usarse para clarificar el código, no para decidir cuánto detalle del funcionamiento interno se revela.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Cuando el código es suficientemente claro y autodescriptivo",
                    "retroalimentacion": "Si el código ya es claro y autodescriptivo, los comentarios pueden no ser necesarios. En este caso, añadir comentarios puede incluso considerarse redundante o innecesario.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "10-5-P",
            "pregunta": "¿Por qué es importante el manejo de errores y la gestión de excepciones en el código?",
            "respuestas": {
                "1": {
                    "contenido": "Porque asegura que no haya errores en el código",
                    "retroalimentacion": "El manejo de errores y la gestión de excepciones no aseguran que no haya errores en el código. En cambio, permiten que el programa responda adecuadamente cuando ocurren errores.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Porque aumenta la probabilidad de que ocurran errores en el código",
                    "retroalimentacion": "El propósito del manejo de errores y la gestión de excepciones es precisamente lo contrario: minimizar el impacto de los errores cuando ocurren, no aumentar su probabilidad.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Porque prepara al programa para manejar errores de manera adecuada y proporcionar mensajes claros y útiles al usuario",
                    "retroalimentacion": "El manejo adecuado de errores y excepciones permite que el programa responda a fallos de manera controlada y proporcione información útil al usuario para entender y posiblemente corregir el problema.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Porque hace que el código sea más difícil de depurar",
                    "retroalimentacion": "El manejo de errores bien implementado facilita la depuración al proporcionar información clara y específica sobre los errores cuando ocurren, en lugar de dificultar el proceso de depuración.",
                    "estado": "false"
                }
            }
        }
    }
}