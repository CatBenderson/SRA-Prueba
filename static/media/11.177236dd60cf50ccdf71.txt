{
    "id": "11",
    "nombre": "Mejores prácticas: Calidad en el código",
    "contenido": "La calidad en el código es un aspecto fundamental que impacta en diferentes momentos del ciclo de vida de software. \n\nEl primero de ellos es la detección de errores. Un código de buena calidad va a permitir identificar prontamente las áreas de error, evitando costos mayores en un futuro. Esto va estrictamente relacionado con la agilidad en el desarrollo ya que al poder identificar errores más rápido, se mejora la experiencia al desarrollador y se pueden realizar los cambios con prontitud.\n\nDos aspectos que también son importantes son la mantenibilidad y la escalabilidad pues entre más alta sea la calidad más sencillo será modificar, mantener y escalar un proyecto en un futuro. \n\nAlgunas recomendaciones para genera código de calidad son las siguientes\n\n*Código *limpio: Un código limpio es más fácil de leer, entender y mantener.  Es una tarea a la que se debe dedicar tiempo para asegurar que sea legible y con una buena estructura. Para lograrlo se pueden seguir los estándares de codificación de los que ya hemos hablado (Mejores prácticas: Estándares de codificación y documentación)\n\n*Pruebas *unitarias: Permiten a los desarrolladores identificar y solucionar pequeños problemas antes de que escalen a la vez que les permiten documentar la funcionalidad del código. Existen herramientas con JUnit o Nunit que permiten desarrollar dichas pruebas. Es importante mencionar que al probar se deben incluir todos los casos de uso posibles para una mejor calidad.\n\n*Revisión *de *código: Es una actividad muy importante dentro de un equipo de desarrollo, a pesar de que estemos convencidos de que nuestro código cumple con los estándares requeridos, la revisión por parte de un compañero de equipo o por una herramienta siempre será una ayuda adicional.\n\n*Refactorización *de *código: Se trata de reescribir el código que ya se tiene para mejorarlo sin alterar sus funcionalidades. Esto se hace con la intención de mejorar la legibilidad, eficiencia y mantenibilidad del código. Herramientas como SonarQube o CodeClimate ayudan a detectar las oportunidades de refactorización.\n\n*Control *de *versiones: Un control de versiones permite a los desarrolladores llevar un seguimiento de los cambios en el código a la vez de colaborar de mejor manera gracias a la ayuda de mensajes de confirmación o ramas nuevas. Git o SVN son herramientas muy usadas en este campo.",
    "imagenes": {
        "1": {
            "url": "",
            "alt": ""
        },
        "2": {
            "url": "",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "2": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "11-1-P",
            "pregunta": "¿Cuál es uno de los beneficios principales de tener código de buena calidad?",
            "respuestas": {
                "1": {
                    "contenido": "Aumento de costos futuros",
                    "retroalimentacion": "El código de buena calidad tiende a reducir los costos futuros asociados con el mantenimiento y la corrección de errores.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Reducción de la velocidad de desarrollo",
                    "retroalimentacion": "La calidad del código bien mantenido suele aumentar la velocidad de desarrollo, ya que reduce el tiempo necesario para identificar y corregir errores.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Identificación más rápida de errores",
                    "retroalimentacion": "Uno de los beneficios principales de tener código de buena calidad es que los errores tienden a ser identificados más rápidamente, lo que permite corregirlos antes de que se conviertan en problemas mayores.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Mejora la comunicación entre equipos de desarrollo",
                    "retroalimentacion": "Si bien la calidad del código puede influir en la comunicación entre equipos de desarrollo, no es uno de los beneficios principales asociados con la calidad del código.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "11-2-P",
            "pregunta": "¿Cómo contribuye la calidad del código a la agilidad en el desarrollo?",
            "respuestas": {
                "1": {
                    "contenido": "Aumentando la complejidad del proyecto",
                    "retroalimentacion": "La calidad del código bien mantenido tiende a reducir la complejidad del proyecto, lo que facilita la agilidad en el desarrollo.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Facilitando la experiencia del desarrollador y permitiendo cambios rápidos",
                    "retroalimentacion": "La calidad del código contribuye a la agilidad en el desarrollo al proporcionar una base sólida para la implementación de cambios rápidos y eficientes.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Ralentizando el proceso de identificación de errores",
                    "retroalimentacion": "La calidad del código bien mantenido tiende a acelerar el proceso de identificación de errores, lo que aumenta la agilidad en el desarrollo.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Reduciendo la colaboración entre desarrolladores",
                    "retroalimentacion": "La calidad del código puede fomentar la colaboración entre desarrolladores al proporcionar una base clara y comprensible para el trabajo en equipo.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "11-3-P",
            "pregunta": "¿Por qué es importante la mantenibilidad y la escalabilidad del código?",
            "respuestas": {
                "1": {
                    "contenido": "Porque disminuye la complejidad del proyecto",
                    "retroalimentacion": "La mantenibilidad y la escalabilidad del código tienden a aumentar la complejidad del proyecto al proporcionar una estructura sólida y flexible para el crecimiento futuro.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Porque aumenta la cantidad de errores en el código",
                    "retroalimentacion": "La mantenibilidad y la escalabilidad del código tienden a reducir la cantidad de errores al proporcionar una base sólida para futuras modificaciones y expansiones del proyecto.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Porque facilita la modificación, mantenimiento y crecimiento del proyecto en el futuro",
                    "retroalimentacion": "La mantenibilidad y la escalabilidad del código son importantes porque facilitan la modificación, el mantenimiento y el crecimiento del proyecto a medida que cambian los requisitos y las demandas del usuario.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Porque disminuye la calidad del proyecto",
                    "retroalimentacion": "La mantenibilidad y la escalabilidad del código tienden a aumentar la calidad del proyecto al proporcionar una base sólida y flexible para futuras iteraciones y mejoras.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "11-4-P",
            "pregunta": "¿Cuál de las siguientes recomendaciones contribuye a generar código de calidad?",
            "respuestas": {
                "1": {
                    "contenido": "Reducir la cantidad de pruebas unitarias",
                    "retroalimentacion": "Reducir la cantidad de pruebas unitarias no contribuye a generar código de calidad, ya que las pruebas unitarias son una parte fundamental del aseguramiento de la calidad del software.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "No documentar el código para mantenerlo más claro",
                    "retroalimentacion": "La documentación clara y concisa del código es fundamental para comprender su funcionamiento y mantenimiento, por lo que no documentar el código no contribuye a la calidad del mismo.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Realizar revisiones de código de forma diaria",
                    "retroalimentacion": "Realizar revisiones de código de forma diaria es una práctica recomendada que puede ayudar a identificar y corregir problemas en el código de manera oportuna, contribuyendo así a la calidad del mismo.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Escribir código limpio y seguir estándares de codificación",
                    "retroalimentacion": "Escribir código limpio y seguir estándares de codificación son prácticas que contribuyen significativamente a generar código de calidad, ya que hacen que el código sea más legible, mantenible y menos propenso a errores.",
                    "estado": "true"
                }
            }
        },
        "5": {
            "id": "11-5-P",
            "pregunta": "¿Cuál es el propósito de la refactorización de código?",
            "respuestas": {
                "1": {
                    "contenido": "Mejorar la legibilidad, eficiencia y mantenibilidad del código sin alterar su funcionalidad",
                    "retroalimentacion": "La refactorización de código es un proceso que busca mejorar la calidad interna del código sin cambiar su comportamiento externo, lo que incluye mejorar su legibilidad, eficiencia y mantenibilidad.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Aumentar la complejidad del código",
                    "retroalimentacion": "La refactorización de código busca precisamente lo contrario, reducir la complejidad y mejorar la calidad del código existente.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Reducir la flexibilidad del código",
                    "retroalimentacion": "La refactorización de código generalmente busca mejorar la flexibilidad del código al eliminar código duplicado y mejorar la estructura del mismo.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Introducir más errores en el código",
                    "retroalimentacion": "La refactorización de código se realiza para mejorar la calidad del código existente y reducir la cantidad de errores, no para introducir más.",
                    "estado": "false"
                }
            }
        }
    }
}