{
    "id": "8",
    "nombre": "Fundamentos: Re-uso",
    "contenido": "Una de las mejores técnicas que tenemos a la hora de programar es la reutilización. La reutilización o re-uso implica utilizar elementos ya existentes para la solución de diferentes problemas. Aplicar esto en nuestros proyectos tiene beneficios tales como:\n\n*Mayor *productividad *y *ahorro *de *tiempo:  Al evitar trabajar en una solución desde cero y no tener que reescribir el código una y otra vez, disminuimos las horas que empleamos en cada componente del proyecto logrando cumplir con plazos establecidos.\n\n*Menor *riesgo: Cuando reutilizamos código, es porque sabemos que funciona en algún otro sistema y que se ha probado muchas veces antes.\n\n*Mejora *de *la *calidad: Algunos bloques de código reutilizables son revisados por expertos antes de estar disponibles para su uso, esto garantiza que el programa en el que se aplique tendrá un grado más de calidad.\n\n*Menores *costos: Reutilizando el mismo bloque de códigos, hay una reducción en los costes relacionados con el desarrollador y mantenimiento de software.\n\nLa reutilización se puede aplicar a diferentes niveles del proyecto\n\n*Función: Es uno de los ejemplos más básicos de reutilización, al ser un conjunto de líneas agrupadas para realizar una tarea específica, los programadores pueden llamarlas varias veces sin tener que volver a escribir su totalidad.\n\n*Bibliotecas: Son un conjunto de funciones y clases que se pueden incorporar a un proyecto. Están diseñadas para facilitar el trabajo del programador ya que le permiten acceder fácilmente a su contenido sin necesidad de escribirlos desde cero.\n\n*Clase: Una clase es un fragmento de código que se puede reutilizar en diferentes partes del programa con la ayuda de herencia y polimorfismo. Está compuesta por variables y métodos. Lo que permite crear objetos con los mismos atributos pero comportamientos ligeramente diferenciados entre sí.\n\n*Frameworks: Los frameworks son librerías o conjuntos predefinidos de bibliotecas diseñados para facilitar la creación rápida y sencilla de proyectos complejos sin necesidad de empezar desde 0. Se basan en muchas convenciones preestablecidas. En consecuencia, no hay necesidad de volver a escribir el mismo código varias veces para lograr resultados similares entre proyectos distintos.",
    "imagenes": {
        "1": {
            "url": "",
            "alt": ""
        },
        "2": {
            "url": "",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "2": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "8-1-P",
            "pregunta": "¿Cuál es uno de los beneficios de aplicar la reutilización de código en proyectos de programación?",
            "respuestas": {
                "1": {
                    "contenido": "Aumento del riesgo al utilizar código previamente probado.",
                    "retroalimentacion": "El uso de código previamente probado tiende a disminuir el riesgo, ya que dicho código ya ha sido validado en otros contextos.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Mayor complejidad en el desarrollo de soluciones.",
                    "retroalimentacion": "La reutilización de código generalmente reduce la complejidad, permitiendo construir sobre soluciones ya existentes en lugar de desarrollarlas desde cero.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Reducción de horas de trabajo y ahorro de tiempo.",
                    "retroalimentacion": "Uno de los principales beneficios de reutilizar código es la significativa reducción en las horas de trabajo y el ahorro de tiempo, ya que no es necesario desarrollar desde cero.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Mayor costo en el desarrollo y mantenimiento de software.",
                    "retroalimentacion": "Reutilizar código tiende a reducir los costos en el desarrollo y mantenimiento del software, ya que se aprovechan componentes ya existentes.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "8-2-P",
            "pregunta": "¿Qué implica el menor riesgo al reutilizar código en un proyecto?",
            "respuestas": {
                "1": {
                    "contenido": "No se requiere realizar pruebas de calidad.",
                    "retroalimentacion": "Aun cuando se reutiliza código, las pruebas de calidad siguen siendo esenciales para asegurar que el código funcione adecuadamente en el nuevo contexto.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "El código ha sido revisado por expertos antes de su uso.",
                    "retroalimentacion": "El menor riesgo al reutilizar código se debe a que dicho código ya ha sido revisado y probado por expertos en su contexto original.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Se garantiza que no habrá problemas de compatibilidad.",
                    "retroalimentacion": "Aunque el código reutilizado ha sido probado, no siempre se puede garantizar que no habrá problemas de compatibilidad en el nuevo contexto.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Se asume que el código siempre funcionará sin errores.",
                    "retroalimentacion": "Aunque se espera que el código reutilizado funcione bien, siempre existe la posibilidad de errores al integrarlo en un nuevo proyecto, por lo que se deben realizar pruebas.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "8-3-P",
            "pregunta": "¿Qué es una función en el contexto de la reutilización de código?",
            "respuestas": {
                "1": {
                    "contenido": "Un conjunto de instrucciones para realizar una tarea específica que puede ser llamado varias veces.",
                    "retroalimentacion": "En la reutilización de código, una función es un conjunto de instrucciones diseñadas para realizar una tarea específica y que puede ser llamada múltiples veces dentro del programa.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Un conjunto de bibliotecas predefinidas.",
                    "retroalimentacion": "Las bibliotecas predefinidas pueden contener funciones, pero una función no es un conjunto de bibliotecas.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Una estructura de código basada en herencia y polimorfismo.",
                    "retroalimentacion": "Las estructuras de código basadas en herencia y polimorfismo son características de la programación orientada a objetos, no definiciones de una función.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Una colección de clases y objetos.",
                    "retroalimentacion": "Una colección de clases y objetos puede incluir funciones, pero no define qué es una función.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "8-4-P",
            "pregunta": "¿Qué son los frameworks en el contexto de la reutilización de código?",
            "respuestas": {
                "1": {
                    "contenido": "Conjuntos de funciones que se pueden llamar varias veces.",
                    "retroalimentacion": "Los frameworks pueden incluir funciones reutilizables, pero su alcance es más amplio que simplemente ser conjuntos de funciones.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Conjuntos de bibliotecas diseñadas para facilitar la creación rápida de proyectos.",
                    "retroalimentacion": "Un framework es un conjunto de bibliotecas y herramientas diseñadas para facilitar la creación rápida y estructurada de proyectos de software.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Estructuras de código basadas en herencia y polimorfismo.",
                    "retroalimentacion": "Aunque los frameworks pueden utilizar herencia y polimorfismo, su definición es más amplia y no se limitan a estas características.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Un conjunto de variables y métodos encapsulados en una clase.",
                    "retroalimentacion": "Un framework puede contener clases con variables y métodos, pero su definición va más allá de ser un conjunto de clases.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "8-5-P",
            "pregunta": "¿Qué implica la reutilización de clases en un proyecto de programación?",
            "respuestas": {
                "1": {
                    "contenido": "Utilizar funciones predefinidas para realizar tareas específicas.",
                    "retroalimentacion": "Las funciones predefinidas son una parte del código reutilizable, pero la reutilización de clases implica algo más que solo funciones.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Incorporar bibliotecas de terceros en el código.",
                    "retroalimentacion": "Incorporar bibliotecas de terceros es una forma de reutilización de código, pero la reutilización de clases se refiere específicamente a la reutilización de la estructura y funcionalidad de clases definidas.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Crear objetos con atributos y comportamientos compartidos pero ligeramente diferenciados entre sí.",
                    "retroalimentacion": "La reutilización de clases permite crear objetos que comparten atributos y comportamientos definidos en la clase base, facilitando la extensibilidad y mantenimiento del código.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Utilizar un conjunto predefinido de herramientas para el desarrollo de software.",
                    "retroalimentacion": "Utilizar un conjunto predefinido de herramientas es un beneficio de los frameworks, no específicamente de la reutilización de clases.",
                    "estado": "false"
                }
            }
        }
    }
}