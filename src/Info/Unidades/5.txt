{
    "id": "5",
    "nombre": "Fundamentos: Minimizar la complejidad",
    "contenido": "Producimos software para poder ayudarnos a manejar tareas del día a día, en contextos cada vez más variados y por personas diferentes, ante esto, es inevitable que las aplicaciones sean cada vez más robustas y complejas.  Sin embargo debemos mantener una estructura simple que nos permita mejorar la eficiencia, calidad y extensibilidad de los proyectos.\nComencemos por reconocer que la complejidad pude ser de 5 tipos:\n*1. *Complejidad *Algorítmica: La eficiencia de los algoritmos utilizados en el software es fundamental. Algoritmos ineficientes pueden llevar a un rendimiento pobre y afectar negativamente la experiencia del usuario.\n*2. *Complejidad *Estructural: La estructura del código es esencial para la comprensión y el mantenimiento. La anidación excesiva de estructuras de control y dependencias complicadas entre módulos pueden aumentar la complejidad y dificultar la gestión del código.\n*3. *Complejidad *de *Datos: La gestión de datos es fundamental en la mayoría de las aplicaciones. Estructuras de datos demasiado complicadas o bases de datos mal diseñadas pueden ser una fuente importante de complejidad.\n*4. *Complejidad *Funcional: La funcionalidad del software debe ser clara y bien definida. Demasiadas funciones o características pueden dificultar la comprensión y el mantenimiento.\n*5. *Complejidad *de *Seguridad: La seguridad es crucial en el desarrollo de software. La falta de medidas de seguridad adecuadas y la exposición a vulnerabilidades pueden tener consecuencias graves.\nAhora que conocemos en qué aspectos puede haber complejidad mostraremos algunas técnicas que podemos aplicar para evitarla o solucionarla.\n*Uso *de *estándares: Ayudan a que un proyecto alcance sus objetivos con eficiencia, calidad y bajo costo. Además aseguran un apoyo en los aspectos de seguridad de un sistema. Algunos de los estándares que se pueden implementar son:\n        • Formatos y contenidos de documentos\n        • Estándares específicos de lenguajes de programación\n        • Nomenclaturas e indentación\n        • Estándares de interfaces o llamadas al sistema\n        • Notaciones de los diagramas.\nComo se puede notar, algunos de estos estándares son internos (son definidos por el mismo equipo de desarrollo) y externos (convenciones reguladas por organizaciones), aplicando ambos se asegura una mejor calidad en el trabajo.\n*Diseño *modular:  Se refiere a una metodología de diseño que implica dividir un sistema de software en módulos o componentes más pequeños y autónomos, donde cada módulo realiza una función o tarea específica dentro del sistema. Estos módulos están diseñados de manera que sean independientes entre sí en la medida de lo posible y se comunican a través de interfaces bien definidas.\n*Técnicas *de *construcción *enfocadas *en *la *calidad: Además de fallos en los requerimiento o en el diseño, pueden existir problemas durante la construcción que afecten la calidad de un producto. Existen muchas técnicas para asegurar la calidad del código:\n        • Pruebas unitarias\n        • Desarrollo en base a pruebas\n        • Programación defensiva)\n        • Debugging\n        • Inspecciones\n        • Revisiones técnicas",
    "imagenes": {
        "1": {
            "url": "",
            "alt": ""
        },
        "2": {
            "url": "",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "5-1-E",
            "imagen": "https://i.imgur.com/MR2FrsP.jpeg",
            "pregunta": "Gestor de tareas: Consiste en una aplicación que permite a los usuarios crear, organizar y seguir sus tareas ya sea por día, semana o mes. Cuenta con una plataforma de colaboración en equipos y ofrece recordatorios para las tareas pendientes. Juan es un usuario de esta plataforma, sin embargo, en su antiguo dispositivo no recibía las notificaciones de sus tareas además de que solía consumirle mucha batería. De la misma manera considera que es una aplicación lenta, sobre todo al guardar los datos. El simple registro de una tarea tarda más de lo que debería y a veces cuando las quiere ver todas, faltan algunas que ya había registrado. En general considera que la interfaz es muy compleja, a pesar de ya usarla por un tiempo, suele tardar para encontrar alguna funcionalidad que no suele usar frecuentemente. El último problema que ha tenido es que perdió su cuenta anterior, la aplicación mencionó que se debía a un incidente de seguridad que habían sufrido y que tratarían en arreglarlo pronto, sin embargo ha leído en internet que el código de tal aplicación tiene muchas funciones largas y anidadas y que por esto, es difícil de mantener. ¿A qué tipo de complejidad corresponde cada problema?",
            "respuestas": {
                "1": {
                    "contenido": "1c, 2b, 2f, 3e, 3g, 4a, 4h, 5d",
                    "retroalimentacion": "La pérdida de la cuenta por ataques se relaciona más adecuadamente con la manera en la que se aseguran los datos dentro del sistema mientras que el consumo elevado de la batería es un problema relacionado con la eficiencia en el uso de los recursos del dispositivo ",
                    "estado": "false"
                },
                "2": {
                    "contenido": "1d, 2b, 2f, 3e, 3g, 4a, 4h, 5c",
                    "retroalimentacion": "La pérdida de la cuenta por ataques se relaciona más adecuadamente con la manera en la que se aseguran los datos dentro del sistema mientras que el consumo elevado de la batería es un problema relacionado con la eficiencia en el uso de los recursos del dispositivo. Por último, la seguridad se enfoca en proteger el sistema contra amenazas y vulnerabilidades, y por lo general no afecta en la velocidad de la aplicación",
                    "estado": "false"
                },
                "3": {
                    "contenido": "1c, 2f, 2d, 3e, 3g, 4a, 4h, 5b",
                    "retroalimentacion": "*Complejidad *Algorítmica\nLentitud de la aplicación: La lentitud puede ser causada por algoritmos ineficientes que tienen tiempos de ejecución elevados.\n\n*Complejidad *Estructural\nFalta de notificaciones en ciertos dispositivos: Si la estructura no está bien diseñada para soportar diferentes tipos de dispositivos, pueden surgir problemas en la entrega de notificaciones.\n\nConsumo elevado de la batería: Este problema puede deberse a un diseño ineficiente de la arquitectura que no optimiza el uso de recursos del dispositivo. \n\n*Complejidad *de *Datos\nPérdida de tareas registradas en el sistema: La pérdida de datos puede ser consecuencia de una gestión deficiente de la base de datos o estructuras de datos mal diseñadas.\n\nInconsistencias en la visualización: Esto puede ser resultado de problemas en la sincronización de datos o en la representación de estos en la interfaz de usuario.\n\n*Complejidad *Funcional\nDificultad para hallar funcionalidades:  Una interfaz complicada o una navegación confusa puede hacer que las funcionalidades sean difíciles de encontrar.\n\nMala percepción general de la interfaz: Las funciones no están bien diseñadas o implementadas desde la perspectiva del usuario.\n\n*Complejidad *de *Seguridad\nPérdida de la cuenta por ataques: La seguridad se relaciona con cómo el software protege los datos y las cuentas de los usuarios frente a posibles amenazas.\n",
                    "estado": "true"
                },
                "4": {
                    "contenido": "1e, 2f, 2b, 3c, 3a, 4g, 4h, 5d",
                    "retroalimentacion": "La pérdida de datos suele deberse a problemas en la gestión de datos, como la persistencia y la integridad de los datos almacenados. Aunque el manejo ineficiente de datos puede contribuir a la lentitud, no es de las razones principales. La organización y accesibilidad de las funcionalidades dentro de la aplicación no está incluido dentro de la complejidad de datos.Las inconsistencias de visualización pueden surgir de una mala sincronización o manejo de los datos que se muestran en la interfaz de usuario. El consumo elevado de la batería no está relacionado con los problemas de seguridad.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "5-1-P",
            "pregunta": "¿Cuál de los siguientes aspectos puede afectar negativamente la experiencia del usuario si no se maneja adecuadamente en el desarrollo de software?",
            "respuestas": {
                "1": {
                    "contenido": "Complejidad estructural",
                    "retroalimentacion": "La complejidad estructural se refiere a cómo están organizadas las partes internas del software, lo que puede afectar el desarrollo y mantenimiento, pero no está directamente relacionado con la experiencia del usuario final.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Complejidad de seguridad",
                    "retroalimentacion": "La complejidad de seguridad trata sobre las medidas y protocolos para proteger el software y los datos. Aunque es crucial, no afecta directamente la experiencia del usuario si se maneja correctamente.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Complejidad de datos",
                    "retroalimentacion": "La complejidad de datos implica la gestión y procesamiento de grandes volúmenes de información. Si bien es importante, no afecta directamente la usabilidad y la experiencia del usuario.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Complejidad funcional",
                    "retroalimentacion": "La complejidad funcional se refiere a las características y funcionalidades del software. Si no se maneja adecuadamente, puede hacer que el software sea difícil de usar y entender, afectando negativamente la experiencia del usuario.",
                    "estado": "true"
                }
            }
        },
        "2": {
            "id": "5-2-P",
            "pregunta": "¿Qué implica la complejidad algorítmica en el desarrollo de software?",
            "respuestas": {
                "1": {
                    "contenido": "Problemas relacionados con la eficiencia de los algoritmos utilizados.",
                    "retroalimentacion": "La complejidad algorítmica se refiere a la eficiencia con la que los algoritmos procesan datos, afectando el rendimiento y la velocidad del software.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Dificultad en la comprensión y el mantenimiento del código.",
                    "retroalimentacion": "Aunque la complejidad algorítmica puede influir en la legibilidad del código, no se centra principalmente en la la comprensión o el mantenimiento del código.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Gestión inadecuada de las estructuras de datos.",
                    "retroalimentacion": "La complejidad algorítmica puede estar relacionada con la gestión de las estructuras de datos, pero no es su principal implicación.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Falta de medidas de seguridad adecuadas.",
                    "retroalimentacion": "La complejidad algorítmica no está relacionada con la seguridad del software.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "5-3-P",
            "pregunta": "¿Cuál es una técnica recomendada para evitar la complejidad estructural en el código?",
            "respuestas": {
                "1": {
                    "contenido": "Desarrollo en base a pruebas",
                    "retroalimentacion": "El desarrollo basado en pruebas (TDD) ayuda a asegurar la calidad del software, pero no se enfoca directamente en reducir la complejidad estructural del código.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Uso de estándares",
                    "retroalimentacion": "El uso de estándares permite mantener una estructura consistente y clara en el código, facilitando su comprensión y mantenimiento, lo que ayuda a evitar la complejidad estructural.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Debugging",
                    "retroalimentacion": "El debugging es el proceso de encontrar y corregir errores, pero no previene la complejidad estructural en el diseño del código.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Programación defensiva",
                    "retroalimentacion": "La programación defensiva mejora la robustez del código ante errores, pero no se centra en reducir la complejidad estructural.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "5-4-P",
            "pregunta": "¿Qué implica el diseño modular en el desarrollo de software?",
            "respuestas": {
                "1": {
                    "contenido": "Dividir un sistema de software en módulos independientes",
                    "retroalimentacion": "El diseño modular consiste en dividir un sistema en módulos o componentes independientes, lo que facilita su desarrollo, mantenimiento y escalabilidad.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Realizar pruebas unitarias para asegurar la calidad del código.",
                    "retroalimentacion": "Las pruebas unitarias son importantes para asegurar la calidad del código, pero no son un componente del diseño modular.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Identificar y corregir errores en el código.",
                    "retroalimentacion": "La identificación y corrección de errores son parte del proceso de depuración, no del diseño modular.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Implementar medidas de seguridad para proteger el sistema.",
                    "retroalimentacion": "Las medidas de seguridad son cruciales para proteger el sistema, pero no forman parte del concepto de diseño modular.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "5-5-P",
            "pregunta": "¿Cuál de las siguientes técnicas se utiliza específicamente para asegurar la calidad del código durante la construcción del software?",
            "respuestas": {
                "1": {
                    "contenido": "Inspecciones",
                    "retroalimentacion": "Las inspecciones ayudan a detectar defectos en el código, pero no son una técnica utilizada específicamente durante la construcción del software.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Pruebas unitarias",
                    "retroalimentacion": "Las pruebas unitarias se utilizan para verificar que cada unidad o componente del software funcione correctamente, asegurando la calidad del código durante su desarrollo.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Análisis de estadísticas",
                    "retroalimentacion": "El análisis de estadísticas puede proporcionar información sobre el rendimiento y otros aspectos del software, pero no asegura directamente la calidad del código durante su construcción.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Desarrollo en base a pruebas",
                    "retroalimentacion": "El desarrollo basado en pruebas (TDD) es una metodología de desarrollo que mejora la calidad del software, pero no asegura directamente la calidad del código durante su construcción.",
                    "estado": "false"
                }
            }
        }
    }
}
