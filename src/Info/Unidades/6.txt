{
    "id": "6",
    "nombre": "Fundamentos: Anticiparse al cambio",
    "contenido": "Es bien sabido que las tecnologías que utilizamos hoy en día no serán las más eficaces por siempre. Conforme los años avanzan, la tecnología evoluciona y el software que desarrollamos debe estar preparado para ello.\n\nPara los desarrolladores y las empresas es imposible detenerse ante los cambios en el mundo, por un lado ocurren día a día eventos inesperados que nos obligan a cambiar nuestro estilo de vida. Crisis económicas, pandemias, desastres naturales, son todos eventos inesperados que cambiar por completo el actuar de una empresa. Por otro lado cuando hablamos estrictamente de factores que involucran el desarrollo de software encontramos 3 grandes factores que generan cambios en el producto\n\n*Requisitos *cambiantes: Es uno de los aspectos más comunes a los que equipos de desarrollo se enfrentan, los cambios en los requerimientos del cliente muchas veces son urgentes y no puede ocurrir que por modificaciones a las planeaciones el proyecto se rompa. Desde el comienzo del desarrollo debemos tener claro y estar preparados para que estos cambios ocurran\n\n*Control *de *dependencias: Este es un punto muy importante a la hora de trabajar con un proyecto y que va muy de la mano con el mantenimiento. Las dependencias nuevas que se incorporan pueden ser imprevistas, causar problemas o caer en la degradación. Para evitar esto, es muy importante que las dependencias sean controladas por los módulos de la aplicación. Este control consiste en la creación de cortafuegos de dependencias. A través de estos cortafuegos las dependencias no se propagan.\n\n*Asuntos *empresariales:  Este punto suele llegar a salirse de nuestro control pero también debemos estar preparados por si ocurre. Ya sea por un cambio en el volumen comercial del producto o por un cambio en los presupuestos o los tiempos de entrega, debemos contemplar un plan para que la conclusión del proyecto suceda de la mejor manera.\n",
    "imagenes": {
        "1": {
            "url": "https://i.imgur.com/wswk6PW.png",
            "alt": "Una manera de afrontar estos cambios es implementar nuevas metodologías de trabajo, sobre todo aquellas que reciben el nombre de ágiles, pueden ser de gran ayuda ya que siguen 4 pasos importantes:\n\n*Especificación *de *líneas *base: Nos permite avanzar de manera gradual, solo pasando a una etapa siguiente cuando las especificaciones hayan sido revisadas, corregidas y aprobadas.\n\n*Identificación *de *objetos: Es importante registrar los cambios que sufren nuestros objetos pues sabemos que en el proceso van a evolucionar. Tener un grafo que muestre esto nos ayuda a organizar mejor nuestro proyecto\n\n*Control *de *versiones: Complementa la evolución de los objetos, al combinar procedimientos y herramientas para gestionar sus versiones. Esto permite especificar configuraciones alternativas de un sistema dependiendo de la versión.\n*Control *estricto *de *cambios: Combina procesamientos humanos y herramientas automáticas para proporcionar un mecanismo de control del cambio. Esto involucra el poder dar de alta y de baja objetos cuando se someten a un cambio, manteniendo un control de acceso y sincronía.\n"
        },
        "2": {
            "url": "",
            "alt": ""
        },
        "3": {
            "url": "",
            "alt": ""
        }
    },
    "ejercicios": {
        "1": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "2": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        },
        "3": {
            "id": "",
            "imagen": "",
            "pregunta": "",
            "respuestas": {
                "1": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "2": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "3": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                },
                "4": {
                    "contenido": "",
                    "retroalimentacion": "",
                    "estado": ""
                }
            }
        }
    },
    "preguntas": {
        "1": {
            "id": "6-1-P",
            "pregunta": "¿Qué factor común puede generar cambios en el desarrollo de software según el texto?",
            "respuestas": {
                "1": {
                    "contenido": "Requisitos cambiantes.",
                    "retroalimentacion": "Los requisitos cambiantes son comunes en el desarrollo de software debido a la evolución de las necesidades del cliente o del mercado, lo que puede llevar a cambios en el proyecto.",
                    "estado": "true"
                },
                "2": {
                    "contenido": "Problemas de infraestructura.",
                    "retroalimentacion": "Los problemas de infraestructura pueden afectar el desarrollo del software, pero no son un factor común que genere cambios en los requisitos del proyecto.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Nuevas tecnologías de desarrollo.",
                    "retroalimentacion": "La incorporación de nuevas tecnologías puede influir en el desarrollo del software, pero no es un factor común que cause cambios continuos en el proyecto.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Mejoras en la eficiencia del equipo de desarrollo.",
                    "retroalimentacion": "Las mejoras en la eficiencia del equipo de desarrollo pueden optimizar el proceso, pero no son una causa común de cambios en los requisitos del software.",
                    "estado": "false"
                }
            }
        },
        "2": {
            "id": "6-2-P",
            "pregunta": "¿Qué es esencial para evitar problemas con dependencias en un proyecto de software?",
            "respuestas": {
                "1": {
                    "contenido": "Incorporar dependencias de forma constante.",
                    "retroalimentacion": "Incorporar dependencias de forma constante puede aumentar el riesgo de conflictos y problemas de compatibilidad, complicando el mantenimiento del proyecto.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Controlar las dependencias mediante 'cortafuegos'.",
                    "retroalimentacion": "Controlar las dependencias mediante 'cortafuegos' permite aislar y gestionar mejor las dependencias, reduciendo el riesgo de problemas de compatibilidad y asegurando un entorno más estable.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Limitar el uso de librerías y dependencias.",
                    "retroalimentacion": "Limitar el uso de librerías y dependencias puede reducir la funcionalidad del software y no es una solución práctica para la mayoría de los proyectos modernos que dependen de múltiples bibliotecas.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Dejar que las dependencias se propaguen libremente.",
                    "retroalimentacion": "Permitir que las dependencias se propaguen libremente puede causar conflictos y problemas de integración, dificultando el mantenimiento y la estabilidad del software.",
                    "estado": "false"
                }
            }
        },
        "3": {
            "id": "6-3-P",
            "pregunta": "¿Qué aspectos pueden afectar los asuntos empresariales en el desarrollo de software?",
            "respuestas": {
                "1": {
                    "contenido": "Cambios en la interfaz de usuario.",
                    "retroalimentacion": "Aunque los cambios en la interfaz de usuario pueden influir en la experiencia del usuario, no suelen tener un impacto directo en los asuntos empresariales.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Crisis económicas.",
                    "retroalimentacion": "Las crisis económicas pueden afectar significativamente los asuntos empresariales al limitar los presupuestos, cambiar prioridades y afectar la viabilidad de los proyectos de desarrollo de software.",
                    "estado": "true"
                },
                "3": {
                    "contenido": "Mejoras en el rendimiento del código.",
                    "retroalimentacion": "Las mejoras en el rendimiento del código son técnicas y no afectan directamente los asuntos empresariales.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Cambios en los requisitos del cliente.",
                    "retroalimentacion": "Los cambios en los requisitos del cliente afectan principalmente al alcance y la planificación del proyecto.",
                    "estado": "false"
                }
            }
        },
        "4": {
            "id": "6-4-P",
            "pregunta": "¿Qué metodologías de trabajo se mencionan como útiles para afrontar los cambios en el desarrollo de software?",
            "respuestas": {
                "1": {
                    "contenido": "Metodologías estáticas.",
                    "retroalimentacion": "Las metodologías estáticas no son adecuadas para manejar cambios frecuentes en el desarrollo de software, ya que suelen ser rígidas y menos adaptables.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Metodologías híbridas.",
                    "retroalimentacion": "Las metodologías híbridas combinan elementos de metodologías ágiles y tradicionales, pero no son mencionadas específicamente como las más útiles para gestionar cambios en el desarrollo de software.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Metodologías ágiles.",
                    "retroalimentacion": "Las metodologías ágiles son conocidas por su flexibilidad y capacidad de adaptarse rápidamente a los cambios, lo que las hace especialmente útiles en el desarrollo de software.",
                    "estado": "true"
                },
                "4": {
                    "contenido": "Metodologías tradicionales.",
                    "retroalimentacion": "Las metodologías tradicionales suelen ser menos flexibles y no se adaptan bien a los cambios rápidos, lo que las hace menos adecuadas para el desarrollo de software en entornos dinámicos.",
                    "estado": "false"
                }
            }
        },
        "5": {
            "id": "6-5-P",
            "pregunta": "¿Cuál es uno de los pasos importantes de las metodologías ágiles mencionadas en el texto?",
            "respuestas": {
                "1": {
                    "contenido": "Desarrollo rápido sin especificación previa.",
                    "retroalimentacion": "El desarrollo rápido sin especificación previa puede llevar a resultados inconsistentes y problemas de calidad, y no es una práctica recomendada en las metodologías ágiles.",
                    "estado": "false"
                },
                "2": {
                    "contenido": "Implementación de tecnologías obsoletas.",
                    "retroalimentacion": "El uso de tecnologías obsoletas va en contra de los principios de las metodologías ágiles, que buscan la eficiencia y la actualización constante.",
                    "estado": "false"
                },
                "3": {
                    "contenido": "Control estricto de cambios.",
                    "retroalimentacion": "Las metodologías ágiles buscan adaptarse a los cambios de manera flexible, no mediante un control estricto, lo que permite responder rápidamente a las nuevas necesidades del proyecto.",
                    "estado": "false"
                },
                "4": {
                    "contenido": "Especificación de líneas base.",
                    "retroalimentacion": "La especificación de líneas base es crucial en las metodologías ágiles para establecer una referencia clara del proyecto, permitiendo una gestión eficiente de los cambios y ajustes necesarios.",
                    "estado": "true"
                }
            }
        }
    }
}